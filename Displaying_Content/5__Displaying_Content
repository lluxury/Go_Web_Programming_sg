
    // 常识
      // 些预先设计好的HTML 页面
      // text/template
      // html/templlate
    
    // 模板引擎
      // 服务器端包含 SSI
        // php,JSP
      // 分类
        // 无逻辑模板引擎
          // Mustache
        // 嵌入逻辑的模板引擎
          // php 模板引擎
            // Smarty
            // Blade
    
    // Go的模板引擎
      // 常识
        // action
<body>
    {{ . }}
</body>

    t, _ := template.ParseFiles("tmp1.html")
    t.Execute(w, "Hello World!")

      // 过程
        // process
        // ParseFiles 语法分析
        // 返回Template类型分析模板和错误
        // Execute
          // 将数据应用到模板
        // ResponseWriter 和数据会一起被传人Execute 方法
    
// 没有给定绝对目录,模板要和二进制文件同目录

http://localhost:8080/process

      // 对模板进行语法分析
        // 调用ParseFiles时
          // 创建新模板
          // 使用给定名字
          // 调用ParseFiles

t, _ := template.ParseFiles("tmp1.html")
// 等价于
t : template.New("tmp1.html")
t, _ := t.ParseFiles("tmp1.html")

// 接受多个文件名作为参数

          // 只返回一个模板
          // 其他放映射map,模板集合

ParseGlob
// 匹配模式所有文件语法分析

t, _ := template.ParseFiles("tmp1.html")

t, _ := template.ParseGlob("*.html")


// 语法分析, 最终都是 Parse 方法, 分析字符串
t, _ := template.ParseFiles("tm1.html")
// 等同
tmp1 := `<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html"; charset="utf-8">
        <table>Go Web Programming</table>
    </head>
    <body>
        {{ . }}
    </body>
</html>
`
t := template.New(tmp1.html)
t, _ = t.Parse(tmp1)
t.Execute(w, "Hello World")


        // Must 函数 返回模板指针和错误
t := template.Must(template.ParseFiles("tmp1.html"))

// Must 包裹一个函数,被包裹函数返回指向模板指针和错误,
// 如果错误不是nil,Must 函数将产生panic

      // 执行模板
        // Execute 方法

t.Execute
// 调用模板是最常用的方法
// 传递 ResponseWriter 及模板所用数据

// 只会执行第一个模板

        // ExecuteTemplate
          // 不止一个模板
t, _:= template.ParseFiles("t1.html","t2.html")
// t.Execute(w, "Hello,World ") x 只有t1执行
t.ExecuteTemplate(w, "t2.html","Hello, World!")

    // 动作
      // 常识
        // 嵌入在模板里面的命令
        // {{ }}
        // . 传递给模版的数据

      // 条件动作
        // {{if arg}} xx {{end}}
        // {{if arg}} xx{{else}}  xx {{end}}
    
    {{ if . }}
    Number is greater than 5!
    {{ else }}
    Number is 5 of less
    {{ end }}

      // 迭代动作
        // {{range array}}  .  {{end}}

     <ul>
        {{ range .}}
        <li> {{ . }} </li>
        {{ end }}
    </ul>
    

      // 设置动作
        // {{with arg}} xx {{end}}
// 有意思,格式化的时候会把没用的import 移除

  <body>
    <div>The dot is {{ . }}</div>
    <div>
        {{ with "world"}}
        Now the dot is set to {{ . }}
        {{ end}}
    </div>
    <div>The dot is {{ . }} again</div>
  </body>
// dot 是个变量,可以拿传过去的值,也可以自己设置
// 学习 div 的用法



      // 包含动作
        // {{ template "name"}}  包含模板
        // 模板中包含另一个模板
    
// https://crossgit.github.io/2017/11/29/go%E7%9A%84%E6%A8%A1%E6%9D%BF/
// 模板中如何注释
    <!-- {{ template "h2.html" }} -->  不行

// 嵌套模板,对涉及模板都要进行语法分析, 重要

// 代码没有为模板设置名字,沿用模板文件中的名字
// ParseFiles 函数的第一个参数,为主模板,对集合调用Execute方法时,主模板将被执行

This is the value of the dot in t1.html - [Hello World!]
This is t2.html
This is the value of the dot in t2.html - []

// t1.html 中的 . 被  传入 Hello World 替换
  t, _ := template.ParseFiles("t1.html", "t2.html")
  t.Execute(w, "Hello World!")

// t1 字符串没有传给t2,所以t2打出空 []
// 需要用 {{ template "name" arg}}

// 不传和传的区别
{{ template "t2.html"  }}
{{ template "t2.html" . }}







    // 参数、变量和管道
      // 常识
// 参数 argument 就是模板中的一个值,可以是布尔,整数,字符串
// 也可以是变量,方法,函数,或 . , 方法单值限定

        // arg
{{ if arg }}
  xx
{{ end }}

// 设置变量
$variable : = value

// 变量迭代
{{ range $key, $value := . }}
  The key is {{ $key}} and the value is {{ $value }}
{{ end }}

// 管道模式
        // {{ p1 | p2 |  p3}}
        // 管道定义格式
{{ 12.3456 | printf "%.2f "}}


      // 函数
// Go 模板引擎内置了一些非常基础的函数
        // 返回一个值
        // 返回一个值和一个错误

      // 自定义模板函数
        // FuncMap
          // 函数名字
          // 函数
        // 将Func M ap 与模板进行绑定
// 片定义一个函数

The date/time is 25049-44-2558
// 值不太对,不过应该是系统时间格式的原因,先不追究

// 先定义了一个名为 formatDate 的函数
//   它接受一个 Time 结构作为输入,以 年-月-日 的形式返回一个 IS08601 格式的字符串

// 建立一个FuncMap结构,使用结构将名字fdate映射到formatDate函数
funcMap := template.FuncMap{"fdate": formatDate}

// 使用template.New 创建了一个名为tmp1.html 的模板,
//   返回模板,程序以串联方式调用模板的Funcs方法,将funcMap传递给模板
t :=template.New("tmp1.html").Funcs(funcMap)

  t, _ = t.ParseFiles("tmp1.html")
// 语法分析

  t.Execute(w, time.Now())
// 调用 execute方法, 将ResponseWriter 及当前时间传递过去


// 在调用 ParseFiles 函数时,如果用户没有为模板文件中的模板定义名字,那
// 么函数将使用模板文件的名字作为模板的名字

// 在调用New 函数创建新模板的时候必须传入一个模板名字,
// 如果用户给定的模板名字跟前面分析模板时通过文件名提取的模板名字不相同,那么程序将返回一个错误


        // 用途转换函数

        // 直接调用,管道调用








    // 上下文感知
      // 常识
        // 根据位置,显示内容的时候将对其进行修改
        // 实施正确的转义
// 如果模板显示的是 html 格式的内容,那么模板将对其实施 html 转义
// 如果模板显示的是 JavaScript 格式的内容,那么模板将对其实施 JavaScript 转义

<body>
    <div>{{ . }}</div>
    <div><a herf="/{{ . }}">Path</a></div>
    <div><a href="/?q={{ . }}">Query</a></div>
    <div><a onclick="f(`{{ . }}`)">Onclick</a></div>
</body>
// 输出不同的结果,但写起来好复杂啊

          // HTML
          // JavaScript
          // URL
          // CSS
        // 特殊字符处理
        // 需要实践 多个div
// 主要用于自动防御编程





      // 防御XSS攻击
        // 服务器将攻击者存储的数据原原本本地显示给其他用户
        // 使用自己的权限去执行攻击者发布的恶意代码

// 创建一个html表单,向应用发送数据,存储在form.html文件
<script>alert('Pwnd!');</script>
        // 预防方法 转译
// 上下文感知 对 HTML, JavaScript,CSS 或基于URL的XSS攻击

      // 不对HTML进行转义
        // template.HTML


    // 嵌套模板
      // 常识
        // layout 存局
        // 在多个页面上的固定模式
          // 相应的头部菜单
          // 尾部栏
      // 同一个模板文件里面定义多个不同的模板。
      // ExecuteTemplate
        // layout 模板 第二参数
    // 通过块动作定义默认模板
      // {{ block arg}}
    //  
